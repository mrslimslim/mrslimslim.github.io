(window.webpackJsonp=window.webpackJsonp||[]).push([[43],{445:function(t,e,s){"use strict";s.r(e);var a=s(56),r=Object(a.a)({},(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"csrf攻击原理和防护方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#csrf攻击原理和防护方法"}},[t._v("#")]),t._v(" CSRF攻击原理和防护方法")]),t._v(" "),s("h2",{attrs:{id:"csrf攻击原理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#csrf攻击原理"}},[t._v("#")]),t._v(" CSRF攻击原理")]),t._v(" "),s("h3",{attrs:{id:"_1-cookie的使用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-cookie的使用"}},[t._v("#")]),t._v(" 1. Cookie的使用")]),t._v(" "),s("p",[t._v("HTTP是无状态协议，服务器只能根据当前请求的参数(包括Head和Body的数据)来判断本次请求需要达到的目的。")]),t._v(" "),s("p",[t._v("但是我们现实很多情况需要有状态，比如登录态的身份信息，网页上很多操作需要登录之后才能操作，比如相册的上传照片和删除照片功能都是需要登录之后才能操作的。那么怎么判断登录态？其实解决方法都是类似的，只能是每次HTTP请求都要把登录态信息(这里用Key表示)传给后台服务器，后台通过Key等字段判断用户合法性之后再处理。")]),t._v(" "),s("p",[t._v("怎么方便的让每次HTTP请求都带上Key？所以就设计出了Cookie，这里列举Cookie主要的一些特性。")])])}),[],!1,null,null,null);e.default=r.exports}}]);