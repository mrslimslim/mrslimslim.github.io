(window.webpackJsonp=window.webpackJsonp||[]).push([[120],{478:function(t,s,a){"use strict";a.r(s);var r=a(44),n=Object(r.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"rust生命周期"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#rust生命周期"}},[t._v("#")]),t._v(" Rust生命周期")]),t._v(" "),a("h2",{attrs:{id:"rust编译器的弱点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#rust编译器的弱点"}},[t._v("#")]),t._v(" Rust编译器的弱点")]),t._v(" "),a("p",[t._v("Rust中的每一个"),a("strong",[t._v("引用")]),t._v("都会有一个有效作用域。在 大多数情况下我们无需手动声明生命周期，因为编译器能够可以自动推导。")]),t._v(" "),a("p",[t._v("Rust编译器有一个借用检查器(borrow checker),它比较作用域来确保所有借用都是有效的，来判断所有借用都是合法的。")]),t._v(" "),a("h2",{attrs:{id:"悬垂指针"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#悬垂指针"}},[t._v("#")]),t._v(" 悬垂指针")]),t._v(" "),a("div",{staticClass:"language-rust extra-class"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-definition function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" r"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" x "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            r "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("println!")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"r: {}"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" r"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("这段代码值得注意的点：")]),t._v(" "),a("ul",[a("li",[t._v("r引用了内部的花括号中的x变量，但是x会在内部花括号}处被释放，因此r会引用一个无效的x")])]),t._v(" "),a("p",[t._v("此处r是一个悬垂指针，它引用了提前被释放的变量x。")]),t._v(" "),a("h2",{attrs:{id:"生命周期标记的组成"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#生命周期标记的组成"}},[t._v("#")]),t._v(" 生命周期标记的组成")]),t._v(" "),a("blockquote",[a("p",[t._v("生命周期的标注并不会改变任何引用的实际作用域。")])]),t._v(" "),a("h2",{attrs:{id:"函数的中的生命周期"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#函数的中的生命周期"}},[t._v("#")]),t._v(" 函数的中的生命周期")]),t._v(" "),a("h2",{attrs:{id:"struct和enum的标注"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#struct和enum的标注"}},[t._v("#")]),t._v(" struct和enum的标注")]),t._v(" "),a("h2",{attrs:{id:"方法的标注"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#方法的标注"}},[t._v("#")]),t._v(" 方法的标注")]),t._v(" "),a("h2",{attrs:{id:"static生命周期"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#static生命周期"}},[t._v("#")]),t._v(" static生命周期")]),t._v(" "),a("h2",{attrs:{id:"生命周期可以消除的场景"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#生命周期可以消除的场景"}},[t._v("#")]),t._v(" 生命周期可以消除的场景")])])}),[],!1,null,null,null);s.default=n.exports}}]);